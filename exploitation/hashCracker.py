import asyncio
import hashlib
import queue
from concurrent.futures import ThreadPoolExecutor

cracked_queue = queue.Queue()

#TODO: add possibility to paste just one hash instead of list
#TODO: count words in the wordlist and display the amount of words.
#TODO: with the word count, create a loading bar with an estimation on how long is left of the file.


def crack_hash(hash, hashType, wordList, gui_callback):
    with open(wordList, 'r', encoding='latin-1') as wordListFile:
        for line in wordListFile:
            currentPass = line.strip()
            if hashType == "md5":
                hashedPass = hashlib.md5(currentPass.encode()).hexdigest()
            elif hashType == "sha1":
                hashedPass = hashlib.sha1(currentPass.encode()).hexdigest()
            elif hashType == "sha256":
                hashedPass = hashlib.sha256(currentPass.encode()).hexdigest()
            elif hashType == "sha512":
                hashedPass = hashlib.sha512(currentPass.encode()).hexdigest()
            else:
                hashedPass = ""

            if hashedPass == hash:
                gui_callback(hash, currentPass)
                break

async def startHashCracker(wordList, hashList, hashType, gui_callback, completion_callback=None):

    loop = asyncio.get_running_loop()
    with open(hashList, 'r', encoding='latin-1') as hashListFile, ThreadPoolExecutor() as pool:
        tasks = [loop.run_in_executor(pool, crack_hash, currentHash.strip(), hashType, wordList, gui_callback) for currentHash in hashListFile]
        await asyncio.gather(*tasks)
    if completion_callback:
        completion_callback()

